<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker(二)之搭建redis分布式集群</title>
      <link href="/2020/06/30/docker-er-zhi-da-jian-redis-fen-bu-shi-ji-qun/"/>
      <url>/2020/06/30/docker-er-zhi-da-jian-redis-fen-bu-shi-ji-qun/</url>
      
        <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>宿主机：<code>Ubuntu-14.04_X64</code>-或者16.04</li><li>Docker：<code>1.12.6</code>或者更高版本</li></ul><a id="more"></a><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li>我们将搭建一个包含<code>6</code>个节点的<code>Docker</code>应用栈，其中包括一个负载均衡代理节点、两个<code>Web</code>应用节点、一个主数据库节点及两个从数据库节点。</li></ul><p>会用到数据卷的知识</p><ul><li>获取镜像：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 获取Django镜像</span>$ docker pull django<span class="token comment" spellcheck="true"># 获取HAProxy镜像</span>$ docker pull haproxy<span class="token comment" spellcheck="true"># 获取Redis镜像</span>$ docker pull redis<span class="token comment" spellcheck="true"># 查看本地镜像列表</span>$ docker images</code></pre><ul><li>应用容器节点间的互联，由于我们使用的为同一台宿主机，若为真正的分布式架构集群，还应处理容器的跨主机通信问题，在使用<code>run</code>命令创建容器时，添加<code>--link</code>选项，通过容器名，进行容器间安全的交互通信；</li><li>容器启动顺序：<ol><li>启动<code>1</code>个<code>redis-master</code>容器节点；</li><li>启动<code>2</code>个<code>redis-slave</code>容器节点并连接<code>redis-master</code>节点；</li><li>启动<code>2</code>个<code>Web APP</code>容器节点并连接<code>redis-master</code>节点；</li><li>启动<code>1</code>个<code>HAProxy</code>容器节点并连接2个<code>Web APP</code>节点；</li></ol></li></ul><h2 id="搭建指导"><a href="#搭建指导" class="headerlink" title="搭建指导"></a>搭建指导</h2><h3 id="启动各节点并互连"><a href="#启动各节点并互连" class="headerlink" title="启动各节点并互连"></a>启动各节点并互连</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 请总共打开宿主机的7个终端, 每个终端连接一个容器</span><span class="token comment" spellcheck="true"># 启动redis数据库节点</span>$ docker run -it --name redis-master redis /bin/bash$ docker run -it --name redis-slave1 --link redis-master:master redis /bin/bash$ docker run -it --name redis-slave2 --link redis-master:master redis /bin/bash<span class="token comment" spellcheck="true"># 启动APP节点</span>$ docker run -it -h<span class="token operator">=</span><span class="token string">"APP1"</span> --name APP1 --link redis-master:db -v ~/Projects/Django/App1:/usr/src/app django /bin/bash$ docker run -it -h<span class="token operator">=</span><span class="token string">"APP2"</span> --name APP2 --link redis-master:db -v ~/Projects/Django/App2:/usr/src/app django /bin/bash<span class="token comment" spellcheck="true"># 启动HAProxy节点</span>$ docker run -it -h<span class="token operator">=</span><span class="token string">"HaProxy"</span> --name HAProxy --link APP1:APP1 --link APP2:APP2 -p 6301:6301 -v ~/Project/HAProxy:/tmp haproxy /bin/bash<span class="token comment" spellcheck="true"># 查看运行中的容器</span>$ docker <span class="token function">ps</span></code></pre><h3 id="配置redis数据库，在宿主机上创建redis数据库的配置文件随后copy到redis容器中"><a href="#配置redis数据库，在宿主机上创建redis数据库的配置文件随后copy到redis容器中" class="headerlink" title="配置redis数据库，在宿主机上创建redis数据库的配置文件随后copy到redis容器中"></a>配置<code>redis</code>数据库，在宿主机上创建<code>redis</code>数据库的配置文件随后copy到redis容器中</h3><ul><li><code>redis-master</code>配置文件：</li></ul><pre class=" language-bash"><code class="language-bash">$ vim redis-master.conf</code></pre><pre class=" language-text"><code class="language-text">daemonize yespidfile /var/run/redis.pidport 6379timeout 0tcp-keepalive 0databases 1stop-writes-on-bgsave-error nordbcompression yesrdbchecksum yesdbfilename dump.rdbdir /tmp/maxmemory 2gbmaxmemory-policy allkeys-lruappendonly noappendfsync everysecno-appendfsync-on-rewrite noauto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 512mbhash-max-ziplist-entries 64hash-max-ziplist-value 128list-max-ziplist-entries 64list-max-ziplist-value 128set-max-intset-entries 64zset-max-ziplist-entries 64zset-max-ziplist-value 128activerehashing yes</code></pre><ul><li><code>redis-slave</code>配置文件： /home/lq/</li></ul><pre class=" language-bash"><code class="language-bash">$ vim redis-slave.conf</code></pre><pre class=" language-text"><code class="language-text">daemonize yespidfile /var/run/redis.pidport 6379slaveof master 6379timeout 0tcp-keepalive 0databases 1stop-writes-on-bgsave-error nordbcompression yesrdbchecksum yesdbfilename dump.rdbdir /tmp/maxmemory 2gbmaxmemory-policy allkeys-lruappendonly noappendfsync everysecno-appendfsync-on-rewrite noauto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 512mbhash-max-ziplist-entries 64hash-max-ziplist-value 128list-max-ziplist-entries 64list-max-ziplist-value 128set-max-intset-entries 64zset-max-ziplist-entries 64zset-max-ziplist-value 128activerehashing yes</code></pre><ul><li>配置<code>redis</code>数据库：<br>方法一：将本地redis配置文件复制到容器中的方法：利用数据卷方式</li></ul><pre class=" language-text"><code class="language-text"># 适用于1.12版本及以上## 获取数据卷的挂载点$ docker inspect -f '{{ .Mounts }}' redis-master$ docker inspect -f '{{ .Mounts }}' redis-slave1$ docker inspect -f '{{ .Mounts }}' redis-slave2## 分别记录挂载点 cd /var/lib/docker/volumes/0726b88309db1be325c3c0afc8aa68b8545b96cbab2f16e8136c1e63694d13e9/_data## 形如：/var/lib/docker/volumes/<Container-ID>/_data## 拷贝配置文件  cp /home/lq/redis-slave.conf .$ cp redis-master.conf <redis-master的挂载点>$ cp redis-slave.conf <redis-slave1的挂载点>$ cp redis-slave.conf <redis-slave2的挂载点></code></pre><ul><li>测试操作：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在redis-master容器中</span><span class="token comment" spellcheck="true"># 在redis-master容器中</span>$ <span class="token function">cp</span> /data/redis-master.conf /usr/local/bin/redis.conf$ <span class="token function">cd</span> /usr/local/bin/$ redis-server redis.conf$ redis-cli127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> stu_num 11234567127.0.0.1:6379<span class="token operator">></span> get stu_num127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">exit</span><span class="token comment" spellcheck="true"># 在redis-slave容器中</span><span class="token comment" spellcheck="true"># 在redis-slave容器中</span>$ <span class="token function">cp</span> /data/redis-slave.conf /usr/local/bin/redis.conf$ <span class="token function">cd</span> /usr/local/bin/$ redis-server redis.conf$ redis-cli127.0.0.1:6379<span class="token operator">></span> get stu_num127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">exit</span></code></pre><h3 id="配置Web-APP节点"><a href="#配置Web-APP节点" class="headerlink" title="配置Web APP节点"></a>配置Web APP节点</h3><h4 id="在Web-APP节点上"><a href="#在Web-APP节点上" class="headerlink" title="在Web APP节点上"></a>在Web APP节点上</h4><ul><li><p>安装<code>redis</code>模块：<br>可能会更新安装 pip install –upgrade pip</p><pre class=" language-bash"><code class="language-bash">$ pip <span class="token function">install</span> redis</code></pre></li><li><p>测试操作：</p></li></ul><pre class=" language-bash"><code class="language-bash">$ python</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> redis<span class="token keyword">print</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span>__file__<span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>创建<code>Hello-World</code>的<code>APP</code>：</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /usr/src/app$ <span class="token function">mkdir</span> dockerweb$ <span class="token function">cd</span> dockerweb$ django-admin.py startproject redisweb$ <span class="token function">cd</span> redisweb$ python manage.py startapp helloworld</code></pre><h4 id="在宿主机上"><a href="#在宿主机上" class="headerlink" title="在宿主机上"></a>在宿主机上</h4><ul><li>切换目录：</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~/Projects/Django/App1/dockerweb/redisweb/$ <span class="token function">cd</span> ~/Projects/Django/App2/dockerweb/redisweb/</code></pre><ul><li>配置视图(<code>View</code>)：</li></ul><pre class=" language-bash"><code class="language-bash">$ vim helloworld/views.py</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">import</span> redis<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>requset<span class="token punctuation">)</span><span class="token punctuation">:</span>    str<span class="token operator">=</span>redis<span class="token punctuation">.</span>__file__    str<span class="token operator">+=</span><span class="token string">"&lt;br>"</span>    r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'db'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    info <span class="token operator">=</span> r<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>    str<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"Set Hi &lt;br>"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'Hi'</span><span class="token punctuation">,</span> <span class="token string">'HelloWorld-APP1'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在APP2节点修改为HelloWorld-APP2</span>    str<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"Get Hi: %s &lt;br>"</span> <span class="token operator">%</span> r<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Hi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    str<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"Redis Info: &lt;br>"</span><span class="token punctuation">)</span>    str<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"Key: Info Value"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> info<span class="token punctuation">:</span>        str<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"%s: %s&lt;br>"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> info<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre><ul><li>更改配置文件：</li></ul><pre class=" language-bash"><code class="language-bash">$ vim redisweb/settings.py</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 文件内容</span>ALLOWED_HOSTS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token punctuation">]</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>    <span class="token string">'helloworld'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><ul><li>配置<code>url</code>：</li></ul><pre class=" language-bash"><code class="language-bash">$ vim redisweb/urls.py</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> adminadmin<span class="token punctuation">.</span>autodiscover<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> helloworld<span class="token punctuation">.</span>views <span class="token keyword">import</span> hellourlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>   url<span class="token punctuation">(</span>r<span class="token string">'^helloworld$'</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h4 id="在Web-APP节点上-两个分别都要"><a href="#在Web-APP节点上-两个分别都要" class="headerlink" title="在Web APP节点上  两个分别都要"></a>在<code>Web APP</code>节点上  两个分别都要</h4><ul><li>初始化项目：root@1b787e4ab53b:/usr/src/app/dockerweb/redisweb# </li></ul><pre class=" language-bash"><code class="language-bash">$ python manage.py makemigrations$ python manage.py migrate</code></pre><ul><li>启动服务：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># APP1:</span>$ python manage.py runserver 0.0.0.0:8001<span class="token comment" spellcheck="true"># APP2:</span>$ python manage.py runserver 0.0.0.0:8002</code></pre><h3 id="配置HAProxy节点"><a href="#配置HAProxy节点" class="headerlink" title="配置HAProxy节点"></a>配置<code>HAProxy</code>节点</h3><h4 id="在宿主机上-1"><a href="#在宿主机上-1" class="headerlink" title="在宿主机上"></a>在宿主机上</h4><ul><li>切换目录：</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~/Projects/HAProxy/</code></pre><ul><li>创建配置文件：</li></ul><pre class=" language-bash"><code class="language-bash">$ vim haproxy.cfg</code></pre><pre class=" language-text"><code class="language-text">global    log 127.0.0.1   local0    maxconn 4096    chroot /usr/local/sbin    daemon    nbproc  4    pidfile /usr/local/sbin/haproxy.piddefaults    log     127.0.0.1   local3    mode    http    option  dontlognull    option  redispatch    retries 2    maxconn 2000    balance roundrobin     timeout connect 5000ms    timeout client  50000ms    timeout server  50000mslisten redis_proxy    bind 0.0.0.0:6301    stats enable    bind-process 1    stats uri /haproxy-stats    stats auth phil:NRG93012        server APP1 APP1:8001 check inter 2000 rise 2 fall 5        server APP2 APP2:8002 check inter 2000 rise 2 fall 5</code></pre><h4 id="在HAProxy节点"><a href="#在HAProxy节点" class="headerlink" title="在HAProxy节点"></a>在<code>HAProxy</code>节点</h4><ul><li>切换目录：</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /tmp</code></pre><ul><li>复制配置文件：</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cp</span> haproxy.cfg /usr/local/sbin</code></pre><ul><li>切换目录：</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /usr/local/sbin</code></pre><ul><li>启动服务：</li></ul><pre class=" language-bash"><code class="language-bash">$ haproxy -f haproxy.cfg</code></pre><h3 id="测试操作"><a href="#测试操作" class="headerlink" title="测试操作"></a>测试操作</h3><ul><li>使用浏览器访问，<code>http://&lt;宿主机的IP地址&gt;:&lt;6301&gt;/helloworld</code></li><li>多次请求代理节点，<code>HAProxy</code>节点会自动分发请求，达到负载均衡的目的；</li></ul><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker(一)之安装Docker</title>
      <link href="/2020/06/30/docker-yi-zhi-an-zhuang-docker/"/>
      <url>/2020/06/30/docker-yi-zhi-an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>在<code>Linux</code>上安装<code>Docker</code>并配置加速器，<code>Docker</code>目前被分为两个版本：<ul><li><code>Community-Edition</code>：社区版；</li><li><code>Enterprise-Edition</code>：企业版；</li></ul></li></ul><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><ul><li><code>Ubuntu-14.04_x64(LTS)</code>：<code>Trusty</code>；</li><li><code>Ubuntu-16.04_x64(LTS)</code>：<code>Xenial</code>；</li><li><code>CentOS-7_x64(LTS)</code>；</li></ul><a id="more"></a><h3 id="Ubuntu系统"><a href="#Ubuntu系统" class="headerlink" title="Ubuntu系统"></a>Ubuntu系统</h3><ul><li>卸载旧版本的<code>Docker</code>服务：</li></ul><pre class=" language-bash"><code class="language-bash">$ apt remove docker docker-engine docker.io$ <span class="token function">rm</span> -rf /var/lib/docker/</code></pre><ul><li>在<code>Ubuntu-14.04</code>上需要安装<code>AUFS</code>包，以支持<code>aufs</code>存储驱动:</li></ul><pre class=" language-bash"><code class="language-bash">$ apt <span class="token function">install</span> -y linux-image-extra-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -r<span class="token variable">)</span></span> linux-image-extra-virtual</code></pre><ul><li><p>在<code>Ubuntu-16.04</code>及以后<code>Docker-CE</code>默认使用<code>overlay2</code>作为存储驱动，无需安装；</p></li><li><p>安装基础软件包：</p></li></ul><pre class=" language-bash"><code class="language-bash">$ apt <span class="token function">install</span> -y apt-transport-https ca-certificates curl</code></pre><ul><li>添加<code>Docker</code>的官方<code>GPG</code>密钥：</li></ul><pre class=" language-bash"><code class="language-bash">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key add -</code></pre><ul><li>添加<code>Docker-CE</code>存储库(官网)：</li></ul><pre class=" language-bash"><code class="language-bash">$ add-apt-repository <span class="token string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable"</span></code></pre><ul><li>添加<code>Docker-CE</code>存储库(国内)：</li></ul><pre class=" language-bash"><code class="language-bash">$ add-apt-repository <span class="token string">"deb [arch=amd64] http://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable"</span></code></pre><ul><li>更新软件包的索引列表：</li></ul><pre class=" language-bash"><code class="language-bash">$ apt update</code></pre><h3 id="CentOS系统"><a href="#CentOS系统" class="headerlink" title="CentOS系统"></a>CentOS系统</h3><ul><li>卸载旧版本的<code>Docker</code>服务：</li></ul><pre class=" language-bash"><code class="language-bash">$ yum remove docker docker-common container-selinux docker-selinux docker-engine</code></pre><ul><li>安装<code>yum-utils</code>，它提供<code>yum-config-manager</code>实用程序：</li></ul><pre class=" language-bash"><code class="language-bash">$ yum <span class="token function">install</span> -y yum-utils</code></pre><ul><li>添加<code>Docker-CE</code>存储库(官网)：</li></ul><pre class=" language-bash"><code class="language-bash">$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code></pre><ul><li>添加<code>Docker-CE</code>存储库(国内)：</li></ul><pre class=" language-bash"><code class="language-bash">$ yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</code></pre><ul><li>更新软件包的索引列表：</li></ul><pre class=" language-bash"><code class="language-bash">$ yum makecache fast</code></pre><h2 id="安装Docker服务"><a href="#安装Docker服务" class="headerlink" title="安装Docker服务"></a>安装Docker服务</h2><h3 id="Ubuntu系统-1"><a href="#Ubuntu系统-1" class="headerlink" title="Ubuntu系统"></a>Ubuntu系统</h3><ul><li>安装最新版的<code>Docker</code>服务：</li></ul><pre class=" language-bash"><code class="language-bash">$ apt <span class="token function">install</span> -y docker-ce</code></pre><ul><li>启动<code>Docker</code>服务：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Ubuntu-14</span>$ <span class="token function">service</span> start docker<span class="token comment" spellcheck="true"># Ubuntu-16</span>$ systemctl start docker</code></pre><ul><li>卸载<code>Docker</code>服务：</li></ul><pre class=" language-bash"><code class="language-bash">$ apt purge docker-ce$ <span class="token function">rm</span> -rf /var/lib/docker</code></pre><h3 id="CentOS系统-1"><a href="#CentOS系统-1" class="headerlink" title="CentOS系统"></a>CentOS系统</h3><ul><li>安装最新版的<code>Docker</code>服务：</li></ul><pre class=" language-bash"><code class="language-bash">$ yum <span class="token function">install</span> -y docker-ce</code></pre><ul><li>启动<code>Docker</code>服务：</li></ul><pre class=" language-bash"><code class="language-bash">$ systemctl start docker</code></pre><ul><li>使<code>Docker</code>服务随机自启：</li></ul><pre class=" language-bash"><code class="language-bash">$ systemctl <span class="token function">enable</span> docker</code></pre><ul><li>卸载<code>Docker</code>服务：</li></ul><pre class=" language-bash"><code class="language-bash">$ yum remove -y docker-ce$ <span class="token function">rm</span> -rf /var/lib/docker</code></pre><h3 id="CentOS-Ubuntu系统"><a href="#CentOS-Ubuntu系统" class="headerlink" title="CentOS/Ubuntu系统"></a>CentOS/Ubuntu系统</h3><ul><li>查看<code>Docker</code>的版本信息：</li></ul><pre class=" language-bash"><code class="language-bash">$ docker -v$ docker version</code></pre><h2 id="配置Docker加速器"><a href="#配置Docker加速器" class="headerlink" title="配置Docker加速器"></a>配置Docker加速器</h2><ul><li><p>由于众所周知的原因(墙)，从<code>Docker Hub</code>难以高效地下载镜像，除了使用<code>VPN</code>或代理之外，最为有效的方式就是使用<code>Docker</code>国内镜像；</p></li><li><p><code>DaoCloud</code>为首个提供国内免费<code>Docker Hub</code>镜像的团体，可以使用<code>DaoCloud</code>团队提供的<code>Docker Hub Mirror</code>服务代替<code>Docker</code>官网的<code>Docker Hub</code>，<code>阿里云</code>也提供了国内免费的<code>Docker Hub Mirror</code>；</p></li><li><p><a href="https://www.daocloud.io/" target="_blank" rel="noopener">DaoCloud</a>，注册用户并登录，在自己管理界面点击<code>加速器</code>标签，根据弹出页面配置加速器；</p></li><li><p><a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener">阿里云</a>，支付宝登录进入以后点击<code>镜像加速器</code>，还可以在<a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">阿里云开发者平台</a>中检索镜像；</p></li><li><p>配置私人加速器：</p></li></ul><pre class=" language-bash"><code class="language-bash">$ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh <span class="token operator">|</span> sh -s http://6bdc63e3.m.daocloud.io</code></pre><ul><li>配置文件：</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p /etc/docker$ vim /etc/docker/daemon.json</code></pre><pre class=" language-text"><code class="language-text">{    "registry-mirrors": ["https://9cs90h5l.mirror.aliyuncs.com"]}</code></pre><ul><li>重启<code>Docker</code>服务：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Ubuntu-14</span>$ <span class="token function">service</span> docker restart<span class="token comment" spellcheck="true"># Ubuntu-16/CentOS-7</span>$ systemctl restart docker</code></pre><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/29/hello-world/"/>
      <url>/2020/06/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
